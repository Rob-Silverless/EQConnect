/*=====MASTER GRID RULES=====*/

.container {
    display:grid;
    grid-template-columns: repeat($col-count, 1fr);
    grid-gap: $grid-gap;
    max-width: $container-width;
    margin: 0 auto;
    padding-left: rem-calc(20);
    padding-right: rem-calc(20);
    &.grid-gap {
        grid-gap:2em;
    }
    &.fullwidth {
        max-width: none;
    }

    &.no-gutter {
        grid-gap:0;
    }

    &.no-gutter-r {
        grid-row-gap:0;
    }

    &.no-gutter-c {
        grid-column-gap:0;
    }

    &.gutter-sm {
	    grid-gap: 1em;
    }

    &.align-horiz-l > .col {
        justify-self: flex-start;
    }

    &.align-horiz-c > .col {
        justify-self: center;
    }

    &.align-horiz-r {
        justify-content: flex-end;
    }

    &.align-vert-t > .col {
        align-self: flex-start;
    }

    &.align-vert-c{
        align-items: center;
    }

    &.align-vert-b > .col {
        align-self: flex-end;
    }

    > .col {
        grid-column: span $col-count;
    }

    &.cols-2 > .col {
        grid-column: span 2;
    }

    &.cols-3  > .col {
        grid-column: span 3;
    }

    &.cols-4  > .col {
        grid-column: span 4;
    }

    &.cols-6 > .col {
        grid-column: span 6;
    }

    &.cols-12 > .col {
        grid-column: span 12;
    }
    @for $grid from 1 to $col-count {

        &.cols-#{$grid} > .col{
            grid-column: span $grid;
        }
    }

    @for $gridOffset from 1 to $col-count {
        @for $grid from 1 to $col-count {
            &.cols-offset-#{$gridOffset}-#{$grid} > .col{
                grid-column-start:($gridOffset + 1);
                grid-column-end:(($gridOffset + 1) + $grid);
            }
        }
    }
    @for $gridColumnOne from 1 to $col-count {
        @for $gridColumnTwo from 1 to $col-count {
            &.cols-#{$gridColumnOne}-#{$gridColumnTwo}{
                > .col:nth-of-type(2n -1) {
                    grid-column: span $gridColumnOne;     
                }       
                > .col:nth-of-type(2n) {
                    grid-column: span $gridColumnTwo;     
                } 
            }
        }
    }
    &.cols-8-8-8{
        @include gridThreeCol(8, 8, 8);
    }
}

.container {

    > .col {
        width:100%;
    }

    > .col {
        &.align-horiz-l {
            justify-self: flex-start;
        }
        &.align-horiz-c {
            justify-self: center;
        }
        &.align-horiz-r {
            justify-self: flex-end;
        }
        &.align-vert-t {
            align-self: flex-start;
        }
        &.align-vert-c {
            align-self: center;
        }
        &.align-vert-b {
            align-self: flex-end;
        }
    }
}

/*=====PROJECT GRID RULES=====*/

.container {

&.cols-2-8-2 {
    .col:nth-of-type(3n - 2) {
        grid-column: span 2;
    }
    .col:nth-of-type(3n - 1) {
        grid-column: span 8;
    }
    .col:nth-of-type(3n) {
        grid-column: span 2;     
    }
}

}

/*===========MEDIA QUERIES==========*/

@each $name, $size in $breakpoints {

	@media (max-width: #{$size}) {

		@for $i from 1 through $col-count {

			.container.cols-#{$name}-#{$i} > .col {
				grid-column: span $i;
			}
		}
	}
}
